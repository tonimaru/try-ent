// Code generated by ent, DO NOT EDIT.

package fulltxt

import (
	"entgo.io/ent/dialect/sql"
	"github.com/tonimaru/try-ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldLTE(FieldID, id))
}

// Txt applies equality check predicate on the "txt" field. It's identical to TxtEQ.
func Txt(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldEQ(FieldTxt, v))
}

// TxtEQ applies the EQ predicate on the "txt" field.
func TxtEQ(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldEQ(FieldTxt, v))
}

// TxtNEQ applies the NEQ predicate on the "txt" field.
func TxtNEQ(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldNEQ(FieldTxt, v))
}

// TxtIn applies the In predicate on the "txt" field.
func TxtIn(vs ...string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldIn(FieldTxt, vs...))
}

// TxtNotIn applies the NotIn predicate on the "txt" field.
func TxtNotIn(vs ...string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldNotIn(FieldTxt, vs...))
}

// TxtGT applies the GT predicate on the "txt" field.
func TxtGT(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldGT(FieldTxt, v))
}

// TxtGTE applies the GTE predicate on the "txt" field.
func TxtGTE(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldGTE(FieldTxt, v))
}

// TxtLT applies the LT predicate on the "txt" field.
func TxtLT(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldLT(FieldTxt, v))
}

// TxtLTE applies the LTE predicate on the "txt" field.
func TxtLTE(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldLTE(FieldTxt, v))
}

// TxtContains applies the Contains predicate on the "txt" field.
func TxtContains(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldContains(FieldTxt, v))
}

// TxtHasPrefix applies the HasPrefix predicate on the "txt" field.
func TxtHasPrefix(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldHasPrefix(FieldTxt, v))
}

// TxtHasSuffix applies the HasSuffix predicate on the "txt" field.
func TxtHasSuffix(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldHasSuffix(FieldTxt, v))
}

// TxtEqualFold applies the EqualFold predicate on the "txt" field.
func TxtEqualFold(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldEqualFold(FieldTxt, v))
}

// TxtContainsFold applies the ContainsFold predicate on the "txt" field.
func TxtContainsFold(v string) predicate.Fulltxt {
	return predicate.Fulltxt(sql.FieldContainsFold(FieldTxt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fulltxt) predicate.Fulltxt {
	return predicate.Fulltxt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fulltxt) predicate.Fulltxt {
	return predicate.Fulltxt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fulltxt) predicate.Fulltxt {
	return predicate.Fulltxt(func(s *sql.Selector) {
		p(s.Not())
	})
}
